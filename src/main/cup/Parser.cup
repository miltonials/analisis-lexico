package com.compi;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.lang.Math;
import java_cup.runtime.Symbol;
import java.util.Stack;

import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;

/**
 * Clase principal del compilador
 */
class Parser;


action code {:
        HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
        String currentHash;

        public void imprimirTablaSimbolos () {
            System.out.println("_________________________Tablas de símbolos_________________________");
            for(String key: listaTablasSimbolos.keySet()) {
                System.out.println("Tabla de símbolos: " + key);
                System.out.println("valores: ");
                for (String item : listaTablasSimbolos.get(key)) {
                    System.out.println(item);
                }
                System.out.println("");
            }
            System.out.println("______________________________________________________________________");
        }

        public void agregarTablaSimbolos (String tipo, String nombreFuncion) {
            String tipoTabla = "Tipo: " + tipo;
            ArrayList<String> funcionMain = new ArrayList<String>();
            currentHash = nombreFuncion;
            funcionMain.add(tipoTabla);
            listaTablasSimbolos.put(currentHash, funcionMain);
        }

        public void error(String mensaje) {
            System.out.println(mensaje);
        }

        public void error(String mensaje, int linea, int columna) {
            System.out.println("Error en la linea " + linea + " columna " + columna + ": " + mensaje);
        }

        public void error(String mensaje, int linea, int columna, String token) {
            System.out.println("Error en la linea " + linea + " columna " + columna + ": " + mensaje + " " + token);
        }
:}

parser code {:
        IdLexer miParser;
        // Habilitar la depuración
        boolean _cup_debug = true;
        List<String> syntaxErrors = new ArrayList<>();

        String tipoRetornoActual = null;

        public void setTipoRetorno(String tipo) {
                tipoRetornoActual = tipo;
        }

        public void checkTipoRetorno(String tipoReal) {
                if (tipoRetornoActual != null && !tipoRetornoActual.equals(tipoReal)) {
                        System.err.println("Tipo de retorno incorrecto. Se esperaba: " + tipoRetornoActual + ", pero se encontró: " + tipoReal);
                }
        }

        // Agregar un método para obtener la lista de errores después del análisis
        public List<String> getSyntaxErrors() {
                return syntaxErrors;
        }

        @SuppressWarnings("deprecation")
        public Parser(IdLexer miParser) {
                this.miParser = miParser;
                this.symbolFactory = new DefaultSymbolFactory();
        }
        /*
        public void syntax_error(Symbol s) {
                System.err.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        }
        */
        /*
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
                getSyntaxErrors();
                System.err.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+2)+" columna "+(s.right+1) );
        }
        */
        public void syntax_error(Symbol s) {
                try {
                        String errorMessage = "Error de sintaxis: " + s.value + " en la línea " + (s.left + 1) + " columna " + (s.right + 1);
                        System.err.println(errorMessage);
                        // Agregar lógica adicional si es necesario para errores recuperables
                        //throw new Exception("Error recuperable");
                } catch (Exception e) {
                        System.err.println("Hola");
                        System.err.println("Error de sintaxis: " + e.getMessage());
                }
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
                String errorMessage = "Error de sintaxis no recuperable: " + s.value + " en la línea " + (s.left + 1) + " columna " + (s.right + 1);
                System.err.println(errorMessage);

                // Agregar lógica adicional si es necesario para errores no recuperables
                // throw new Exception("Error no recuperable");
        }
:}


init with {: :};

scan with {: return miParser.next_token(); :};

/* Terminales */

// Operadores aritméticos binarios
terminal RUDOLPH; // +
terminal  DASHER; // -
terminal  DANCER; // /
terminal  PRANCER; // // (division entera)
terminal  VIXEN; // *
terminal  COMET; // ~
terminal CUPID; // **
// Operadores aritméticos unarios
terminal  GRINCH; // ++
terminal  QUIEN; // --
// Operadores relacionales
terminal  HERMEY; // <
terminal  BUDDY; // =<
terminal  JINGLE; // >
terminal JANGLE; // >=
terminal  PEPPERMINT; // ==
terminal  WUNORSE; // !=
// Operadores lógicos
terminal  MELCHOR; // ^
terminal  GASPAR; // #
terminal BALTASAR; // !
terminal  LOCAL; // variable

// Tipos
terminal String PERSONA; // identificador
terminal String SANTACLAUS; // int
terminal String PERENOEL; // float
terminal String FATHERCHRISTMAS; // boolean
terminal String KRISKRINGLE; // char
terminal String DEDMOROZ; // string
terminal Integer[] PAPANOEL; // array
terminal Integer L_SANTACLAUS; // literal int
terminal Double L_PERENOEL; // literal float
terminal Boolean L_FATHERCHRISTMAS; // literal boolean
terminal Character L_KRISKRINGLE; // literal char
terminal String L_DEDMOROZ; // literal string
//terminal Integer[] L_PAPANOEL; // literal array

// Parentesis
terminal Integer ABRECUENTO; // (
terminal Integer CIERRECUENTO; // )
terminal Integer ABREEMPAQUE; // [
terminal Integer CIERREEMPAQUE; // ]
terminal Integer ABREREGALO; // {
terminal Integer CIERRAREGALO; // }

// Estructuras de control
terminal Integer ELFO;//if
terminal Integer HADA;//else
terminal Integer DUENDE;//else
terminal Integer ENVUELVE;//for
terminal Integer HACE;//do
terminal Integer REVISA;//until
terminal Integer ENVIA;//return
terminal Integer CORTA;//break

// Entrada y salida
terminal Integer NARRA;//print
terminal Integer ESCUCHA;//read 

// Fin de expresión
terminal  FINREGALO; // |

// Lexema separador
terminal Integer COMA; //,

// Asignación
terminal Integer ENTREGA;//<=

// Comentarios
// son ignorados por el compilador

// Funciones
terminal Integer MAIN; //main
terminal Integer REGALO; // definicion de funcion 

//-------------------------------------------------------------------------------------- NO Terminales
non terminal navidad; // Símbolo inicial ✅
non terminal bolsanavidena; // produccion para funciones ✅
non terminal regaloprincipal; // produccion para main ✅
non terminal regalofuncional; // produccion para funciones ✅
non terminal regalofuncionaltipado; // produccion para funciones ✅
non terminal juguetes; // produccion para expresiones ✅
non terminal tipojuguetes; // produccion para expresiones ✅
non terminal regalofuncionalentero; // produccion para funciones int
non terminal regalofuncionalflotante; // produccion para funciones float
non terminal regalofuncionaldelaverdad; // produccion para funciones boolean
non terminal regalofuncionalcharmander; // produccion para funciones char
non terminal encabezadoregalofuncional; // produccion para "nombreFuncion params {"
non terminal dedicatoriasenteras; // produccion para " return int| } "
non terminal dedicatoriasflotantes; // produccion para  " return float| } "
non terminal dedicatoriasdelaverdad; // produccion para " return boolean| } "
non terminal dedicatoriascharmander; // produccion para  " return char| } "
non terminal monnos; // produccion para parametros de funcion ✅
non terminal tiposmonnos; // produccion para parametros de funcion ✅
non terminal juguetesaritmeticos; // produccion para expresiones aritméticas ✅
non terminal juguetesrelacionales; // produccion para expresiones relacionales
non terminal piezasrelacionales; // produccion para expresiones relacionales ✅
non terminal jugueteslogicos; // produccion para expresiones lógicas ✅
non terminal juguetesunarios; // produccion para expresiones unarias ✅
non terminal jugueteasignacion; // produccion para expresiones de asignacion y ciclos✅
non terminal arreglosarreglados; // produccion para arreglos ✅
non terminal juguetesdecontrol; // produccion para if-elif-else ✅
non terminal juguetesaritmeticos_operadores;
non terminal juguetesdefinidos;
non terminal controldejuguete;
non terminal adicionalesdecontrol;
non terminal iteradordejuguetes;
non terminal parametrosdeenvoltura;
non terminal jugueteparlanchin;
non terminal juguetechismoso;
non terminal etiquetanavidena;
non terminal piezasenteras;
non terminal piezasflotantes;
non terminal jugueteasignacion_entera;
non terminal jugueteasignacion_flotante;
non terminal piezaarregloentero;
non terminal piezaarreglochar;
non terminal error_production; // produccion para errores ✅
//-------------------------------------------------------------------------------------- PRECEDENCIA
precedence left RUDOLPH, DASHER; // suma y resta
precedence left DANCER, PRANCER; // division y division entera
precedence left VIXEN, COMET; // multiplicacion y modulo
precedence left CUPID; // potencia
precedence left GRINCH, QUIEN; // incremento y decremento
precedence left HERMEY, BUDDY, JINGLE, JANGLE, PEPPERMINT, WUNORSE; // operadores relacionales
precedence left MELCHOR, GASPAR; // operadores lógicos
precedence left BALTASAR; // operador lógico not
precedence left COMA; // lexema separador





//-------------------------------------------------------------------------------------- PRODUCCIONES
/* Símbolo inicial y producciones gramaticales*/
start with navidad;

/* Producciones gramaticales */
navidad ::= 
        bolsanavidena
        {:
            imprimirTablaSimbolos();
            System.out.println("Fin de ejecución");
        :}
        ;

bolsanavidena ::=  regaloprincipal
                | regalofuncional regaloprincipal;

regaloprincipal ::= REGALO SANTACLAUS MAIN ABRECUENTO  CIERRECUENTO ABREREGALO
                        juguetes
                        dedicatoriasenteras
                    {:
                        agregarTablaSimbolos("int", "main");
                    :}
                        | error_production; //{: System.out.println("Error en la expresión de regaloprincipal"); :};

//Funciones
regalofuncional ::= regalofuncionaltipado | regalofuncional regalofuncionaltipado;

regalofuncionaltipado ::= regalofuncionalentero | regalofuncionalflotante | regalofuncionaldelaverdad
                | regalofuncionalcharmander
                | error_production; //{: System.out.println("Error en la expresión de regalofuncionaltipado"); :};


regalofuncionalentero ::= REGALO SANTACLAUS:tFunc PERSONA:funName
                        {:
                            agregarTablaSimbolos(tFunc.toString(), funName.toString());setTipoRetorno("int");
                        :}
                            encabezadoregalofuncional juguetes dedicatoriasenteras;

regalofuncionalflotante ::= REGALO PERENOEL:tFunc PERSONA:funName
                            {:
                                agregarTablaSimbolos(tFunc.toString(), funName.toString());
                            :}
                            encabezadoregalofuncional juguetes dedicatoriasflotantes;

regalofuncionaldelaverdad ::= REGALO FATHERCHRISTMAS:tFunc PERSONA:funName
                            {:
                                agregarTablaSimbolos(tFunc.toString(), funName.toString());
                            :}
                            encabezadoregalofuncional juguetes dedicatoriasdelaverdad;

regalofuncionalcharmander ::= REGALO KRISKRINGLE:tFunc PERSONA:funName
                            {:
                                agregarTablaSimbolos(tFunc.toString(), funName.toString());
                            :}
                            encabezadoregalofuncional juguetes dedicatoriascharmander;


// dedicatoriasenteras ::= ENVIA piezasenteras FINREGALO CIERRAREGALO; // | ENVIA PERSONA FINREGALO CIERRAREGALO;
dedicatoriasenteras ::= ENVIA piezasenteras FINREGALO CIERRAREGALO {: checkTipoRetorno("int"); :};
                //      | ENVIA PERSONA FINREGALO CIERRAREGALO;

dedicatoriasflotantes ::= ENVIA piezasflotantes FINREGALO CIERRAREGALO; // | ENVIA PERSONA FINREGALO CIERRAREGALO;
dedicatoriasdelaverdad ::= ENVIA jugueteslogicos FINREGALO CIERRAREGALO | ENVIA PERSONA FINREGALO CIERRAREGALO;
dedicatoriascharmander ::= ENVIA L_KRISKRINGLE FINREGALO CIERRAREGALO | ENVIA PERSONA FINREGALO CIERRAREGALO;

//para parametros
encabezadoregalofuncional ::= ABRECUENTO CIERRECUENTO ABREREGALO
                            | ABRECUENTO monnos CIERRECUENTO ABREREGALO
                ; //{: System.out.println("Error en la expresión de encabezadoregalofuncional"); :};


// Parámetros de la función
monnos ::= tiposmonnos | tiposmonnos COMA monnos;

// tiposmonnos son los diferentes tipos de parámetros de la función
tiposmonnos ::= SANTACLAUS PERSONA:idParam // int identificador
                {:
                //int
                    listaTablasSimbolos.get(currentHash).add("int : " + idParam);
                :}   
            | PERENOEL PERSONA:idParam // float identificador
                {:
                //float
                    listaTablasSimbolos.get(currentHash).add("float : " + idParam);
                :}   
            | FATHERCHRISTMAS PERSONA:idParam // boolean identificador
                {:
                //boolean
                    listaTablasSimbolos.get(currentHash).add("boolean : " + idParam);
                :}   
            | KRISKRINGLE PERSONA:idParam // char identificador
                {:
                //char
                    listaTablasSimbolos.get(currentHash).add("char : " + idParam);
                :}   
            | DEDMOROZ PERSONA:idParam // string identificador
                {:
                //string
                    listaTablasSimbolos.get(currentHash).add("string : " + idParam);
                :}   
            | PAPANOEL PERSONA:idParam // array identificador
                {:
                //array
                    listaTablasSimbolos.get(currentHash).add("array : " + idParam);
                :}   
            | error_production; //{: System.out.println("Error en la expresión de tiposmonnos"); :};

juguetes ::= etiquetanavidena
        | etiquetanavidena CORTA FINREGALO
        | etiquetanavidena CORTA FINREGALO etiquetanavidena
        | error_production; //{: System.out.println("Error en la expresión de juguetes"); };


etiquetanavidena ::= tipojuguetes | tipojuguetes etiquetanavidena;

tipojuguetes ::= juguetesaritmeticos FINREGALO // aritméticas (sumas, restas, etc)✅
         | juguetesrelacionales FINREGALO // expresiones relacionales (menor, mayor, etc) 
         | jugueteslogicos FINREGALO// expresiones lógicas (and, or, etc) 
         //| juguetesunarios // expresiones unarias (incremento, decremento, etc)
         | juguetesdefinidos FINREGALO // expresiones de definicion de variables
         | jugueteasignacion FINREGALO // expresiones de asignacion y ciclos
         | juguetesdecontrol
         | iteradordejuguetes
         | jugueteparlanchin FINREGALO
         | juguetechismoso FINREGALO;

jugueteparlanchin ::= NARRA ABRECUENTO PERSONA CIERRECUENTO | NARRA ABRECUENTO L_DEDMOROZ CIERRECUENTO;//TODO: concatenación de strings
juguetechismoso ::= ESCUCHA ABRECUENTO L_DEDMOROZ CIERRECUENTO
                | ESCUCHA ABRECUENTO CIERRECUENTO
                | ESCUCHA ABRECUENTO PERSONA CIERRECUENTO
                | LOCAL DEDMOROZ PERSONA ENTREGA ESCUCHA ABRECUENTO L_DEDMOROZ CIERRECUENTO
                | LOCAL DEDMOROZ PERSONA ENTREGA ESCUCHA ABRECUENTO CIERRECUENTO
                | error_production; //{: System.out.println("Error en la expresión de juguetechismoso"); :};

// aritméticas (sumas, restas, etc)
juguetesaritmeticos ::= piezasenteras | piezasflotantes;

/*
juguetesaritmeticos ::= juguetesaritmeticos:e1 RUDOLPH juguetesaritmeticos:e2
                        {:
                            System.out.print("-------------" + e1 + "\t");
                            System.out.println(e2);
                          :} // +
                     |  juguetesaritmeticos DASHER juguetesaritmeticos // -
                     |  juguetesaritmeticos DANCER juguetesaritmeticos // /
                     |  juguetesaritmeticos PRANCER juguetesaritmeticos // //
                     |  juguetesaritmeticos VIXEN juguetesaritmeticos // *
                     |  juguetesaritmeticos COMET juguetesaritmeticos // ~
                     |  juguetesaritmeticos CUPID juguetesaritmeticos // **
                     |  ABRECUENTO juguetesaritmeticos CIERRECUENTO // (expr)
                     |  ABRECUENTO juguetesaritmeticos CIERRECUENTO juguetesaritmeticos_operadores juguetesaritmeticos // (expr) + expr
                     |  juguetesaritmeticos juguetesaritmeticos_operadores ABRECUENTO juguetesaritmeticos CIERRECUENTO // (expr) + expr
                     | juguetesunarios // ++ o --
                     |  PERSONA
                     |  L_PERENOEL
                     |  L_SANTACLAUS:e
                        {:
                            RESULT=e;
                        :}; // +;

*/
juguetesaritmeticos_operadores ::= RUDOLPH // +
                |  DASHER // -
                |  DANCER // /
                |  PRANCER // //
                |  VIXEN // *
                |  COMET // ~
                |  CUPID; // **

piezasenteras ::= piezasenteras juguetesaritmeticos_operadores piezasenteras
                |  ABRECUENTO piezasenteras CIERRECUENTO // (expr)
                |  ABRECUENTO piezasenteras CIERRECUENTO juguetesaritmeticos_operadores piezasenteras // (expr) + expr
                |  PERSONA
                |  L_SANTACLAUS;


piezasflotantes ::= piezasflotantes juguetesaritmeticos_operadores piezasflotantes
                     |  ABRECUENTO piezasflotantes CIERRECUENTO // (expr)
                     |  ABRECUENTO piezasflotantes CIERRECUENTO juguetesaritmeticos_operadores piezasflotantes // (expr) + expr
                     | PERSONA VIXEN L_PERENOEL // produce conflicto con piezasenteras
                     |  L_PERENOEL;

// relacionales (menor, mayor, etc)
juguetesrelacionales ::= piezasenteras piezasrelacionales piezasenteras // enteros
        | piezasflotantes piezasrelacionales piezasflotantes; // flotantes

piezasrelacionales ::= HERMEY // <
        | BUDDY // =<
        | JINGLE // >
        | JANGLE // >=
        | PEPPERMINT // ==
        | WUNORSE; // !=

// lógicos (and, or, negacion)
jugueteslogicos ::= jugueteslogicos MELCHOR jugueteslogicos // AND
        | jugueteslogicos GASPAR jugueteslogicos // OR
        | BALTASAR jugueteslogicos // NOT
        | ABRECUENTO jugueteslogicos CIERRECUENTO // (expr)
        | ABRECUENTO jugueteslogicos CIERRECUENTO jugueteslogicos // (expr) op expr
        //| jugueteslogicos ABRECUENTO jugueteslogicos CIERRECUENTO // expr op (expr)
        //| PERSONA // identificador
        | L_FATHERCHRISTMAS;

// unarios (incremento, decremento, etc)
juguetesunarios ::= GRINCH juguetesaritmeticos // ++
                | QUIEN juguetesaritmeticos; // --

// asignacion <=
jugueteasignacion_entera ::= PERSONA ENTREGA piezasenteras | PERSONA ENTREGA GRINCH piezasenteras | PERSONA ENTREGA QUIEN piezasenteras;
jugueteasignacion_flotante ::= PERSONA ENTREGA piezasflotantes | PERSONA ENTREGA GRINCH piezasflotantes | PERSONA ENTREGA QUIEN piezasflotantes;

jugueteasignacion ::= LOCAL SANTACLAUS jugueteasignacion_entera // enteros
        | LOCAL PERENOEL jugueteasignacion_flotante // flotantes
        |jugueteasignacion_entera
        |jugueteasignacion_flotante

        | LOCAL FATHERCHRISTMAS PERSONA ENTREGA jugueteslogicos // booleanos
        | LOCAL KRISKRINGLE PERSONA ENTREGA L_KRISKRINGLE // caracteres
        | LOCAL DEDMOROZ PERSONA ENTREGA L_DEDMOROZ // strings ⚠️ valorar utilizar produccion de strings
        | LOCAL PAPANOEL PERSONA ENTREGA ABREEMPAQUE arreglosarreglados CIERREEMPAQUE

        | PERSONA ENTREGA jugueteslogicos // booleanos
        | PERSONA ENTREGA L_KRISKRINGLE // caracteres
        | PERSONA ENTREGA L_DEDMOROZ // strings ⚠️ valorar utilizar produccion de strings
        | PERSONA ENTREGA ABREEMPAQUE arreglosarreglados CIERREEMPAQUE;

juguetesdefinidos ::= LOCAL tiposmonnos;
arreglosarreglados ::= piezaarregloentero | piezaarreglochar;
piezaarregloentero ::= piezasenteras | piezasenteras COMA piezaarregloentero;
piezaarreglochar ::= KRISKRINGLE | L_KRISKRINGLE COMA piezaarreglochar;

// estructuras de control
juguetesdecontrol ::= ELFO ABRECUENTO controldejuguete CIERRECUENTO ABREREGALO juguetes CIERRAREGALO
                | ELFO ABRECUENTO controldejuguete CIERRECUENTO ABREREGALO juguetes CIERRAREGALO adicionalesdecontrol;

adicionalesdecontrol ::= HADA ABRECUENTO controldejuguete CIERRECUENTO ABREREGALO juguetes CIERRAREGALO 
                | HADA ABRECUENTO controldejuguete CIERRECUENTO ABREREGALO juguetes CIERRAREGALO adicionalesdecontrol
                | DUENDE ABREREGALO juguetes CIERRAREGALO;




iteradordejuguetes ::= ENVUELVE ABRECUENTO parametrosdeenvoltura CIERRECUENTO ABREREGALO juguetes CIERRAREGALO
                | HACE ABREREGALO juguetes CIERRAREGALO REVISA ABRECUENTO controldejuguete CIERRECUENTO FINREGALO;

parametrosdeenvoltura ::= LOCAL SANTACLAUS jugueteasignacion_entera FINREGALO controldejuguete FINREGALO juguetesunarios;

controldejuguete ::= juguetesrelacionales | jugueteslogicos;

// produccion de recuperacion de errores

error_production ::= error //{ System.out.println("Error: " + this.preceding().left + " - " + this.current_left()); }
                | error COMA error; //{ System.out.println("Error: cierre de llaves"); }
                
