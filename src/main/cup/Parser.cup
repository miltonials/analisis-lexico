package com.compi;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.lang.Math;

//para errores
import java_cup.runtime.Symbol;

//para tablas de simbolos
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * Clase principal del compilador
 */
class Parser;


action code {:
        HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
        String currentHash;
        boolean compila = true;
        String vName;
        String vValue;
        char vValueCharmander;
        boolean primeraOp = true;

        StringBuffer cod3D = new StringBuffer();
        StringBuffer data = new StringBuffer();
        int currentTemp = 0;
        int maxTemp = 0;
        int cantidadNumeros = 0;
        boolean isParentesis = false;
        boolean sumaDespuesParentesis = false;

        int contadorPrints = 0;
        int contadorIf = 0;
        int contadorCondiciones = 1;
        int contadorElif = 0;
        int contadorElse = 0;

        /**
          * Tipo de retorno de la funcion
          * @param nombreFuncion nombre de la funcion
          * @return tipo de retorno
          */
        public String tipoRetornoFuncion(String nombreFuncion) {
            String tipo = "";
            for (String item : listaTablasSimbolos.get(nombreFuncion)) {
                if (item.contains("Tipo: ")) {
                    tipo = item.split(":")[1].replace(" ", "");
                    break;
                }
            }
            return tipo;
        }

        /**
         * Verifica si el temporal ya se sumo al temporal 0
         * @param temporal temporal a verificar
         */
        public void temporalFueOperado() {
            System.out.println("paso por el temporalFueOperado: "+"add $t0, $t0, $t"+(currentTemp-1));
            System.out.println(cod3D.toString().contains("add $t0, $t0, $t"+(currentTemp-1)));
            if(!cod3D.toString().contains("add $t0, $t0, $t"+(currentTemp-1))) {
                cod3D.append("add $t0, $t0, $t" + (currentTemp-1) + "\n");
            }
        }

        /**
         * contiene operadores aritmeticos
         * @param variable
        */
        public boolean contieneOperadorAritmetico(String variable) {
            if (variable.contains("+") ){
                return true;
            }
            else if (variable.contains("-") ){
                return true;
            }
            else if (variable.contains("*") ){
                return true;
            }
            else if (variable.contains("/") ){
                return true;
            }
            else if (variable.contains("//") ){
                return true;
            }
            else if (variable.contains("~") ){
                return true;
            }
            else if (variable.contains("**") ){
                return true;
            }
            return false;
        }

        /**
         * contiene operadores booleanos
         * @param variable
        */
        public boolean contieneOperadorBooleano(String variable) {
            return Arrays.asList("<", "=>", ">", "=<", "==", "!=", "^", "#", "!").stream()
                    .anyMatch(variable::contains);
        }

        public void sumaRegsAcumulados() {
            for (int i = 0; maxTemp > i; maxTemp--) {
                cod3D.append("add $t"+(maxTemp - 1)+", $t"+(maxTemp - 1)+", $t" + maxTemp + "\n");  
                cod3D.append("li $t"+(maxTemp)+", 0\n");  
            }
        }


        /**
         * Verificar que el parametro no este declarado
         * @param nombreParametro nombre del parametro
        */
        public void verificarDeclaracionParametro(String nombreParametro) {
            if (parametroDeclarado(nombreParametro)) {
                // Capturar y registrar el error semántico
                System.err.println("Error semántico: Parámetro '" + nombreParametro + "' ya declarado.");
                compila = false;
            }
        }
        public boolean parametroDeclarado(String nombreParametro) {
            // Lógica para verificar si la variable está declarada en la tabla de símbolos
            boolean declarada = false;
            for (String item : listaTablasSimbolos.get(currentHash)) {
                if (item.contains(nombreParametro) && item.contains("Parametro")) {
                    declarada = true;
                }
            }
            return declarada;    
        }
        /**
         * Verifica si la variable ya fue declarada
         * @param nombreVariable nombre de la variable
         */
        public void verificarDeclaracionVariable(String nombreVariable) {
            if (!variableDeclarada(nombreVariable)) {
                // Capturar y registrar el error semántico
                System.err.println("Error semántico: Variable '" + nombreVariable + "' no declarada.");
                compila = false;
            }
        }

        public boolean variableDeclarada(String nombreVariable) {
            // Lógica para verificar si la variable está declarada en la tabla de símbolos
            boolean declarada = false;
            for (String item : listaTablasSimbolos.get(currentHash)) {
                if (item.contains(nombreVariable) && !item.contains("Parametro")) {
                    declarada = true;
                }
                else if (item.contains(nombreVariable) && item.contains("Parametro")) {
                    System.err.println("Error semántico: Variable no puede llamarse igual que un parámetro.");
                    declarada = true;
                }
            }
            return declarada;    
        }
        public void verificarDeclaracionFuncion(String nombreFuncion) {
            String[] funcionesNoPermitidas = {"main", "printInt", "printFloat", "printStr", "readInt", "readFloat", "readStr", "end_program"};
            if (funcionDeclarada(nombreFuncion)) {
                // Capturar y registrar el error semántico
                System.err.println("Error semántico: Función '" + nombreFuncion + "' ya declarada.");
                compila = false;
            }
            else if (Arrays.asList(funcionesNoPermitidas).contains(nombreFuncion)) {
                System.err.println("Error semántico: Función '" + nombreFuncion + "' no permitida.");
                compila = false;
            }
            
        }

        public boolean funcionDeclarada(String nombreFuncion) {
            // Lógica para verificar si la variable está declarada en la tabla de símbolos
            boolean declarada = false;
            for (String item : listaTablasSimbolos.keySet()) {
                if (item.contains(nombreFuncion)) {
                    declarada = true;
                }
            }
            return declarada;    
        }

        /**
         * Verifica que el tipo de retorno sea el correcto
         * @param tipoReal tipo de retorno real
         * @param tipoEsperado tipo de retorno esperado
        */
        public boolean verificarTipoRetorno(String actual) {
            if (tipodeRetorno(actual)) {
                return true;
            }
            // Capturar y registrar el error semántico
            System.err.println("Error semántico: Tipo de retorno incorrecto en la función " + currentHash + ".");
            compila = false;
            return false;
        }

        public boolean tipodeRetorno(String actual) {
            // Lógica para verificar si lo que se retorna es del tipo correcto
            boolean isTrue = false;
            for (String item : listaTablasSimbolos.get(currentHash)) {
                if (item.contains("Tipo: ")) {
                    String tipoFunc = item.split(":")[1].replace(" ", "");
                    if(tipoFunc.equals(actual)){
                        isTrue = true;
                    }
                    break;
                }
            }
            return isTrue;   
        }

        /**
         * Imprime la tabla de símbolos
        */
        public void imprimirTablaSimbolos () {
            System.out.println("_________________________Tablas de símbolos_________________________");
            for(String key: listaTablasSimbolos.keySet()) {
                System.out.println("Tabla de símbolos: " + key);
                System.out.println("valores: ");
                for (String item : listaTablasSimbolos.get(key)) {
                    System.out.println(item);
                }
                System.out.println("");
            }
            System.out.println("______________________________________________________________________");
        }

        /**
         * Agrega una tabla de símbolos a la lista de tablas de símbolos
         * @param tipo tipo de la tabla de símbolos
         * @param nombreFuncion nombre de la función a la que pertenece la tabla de símbolos
         */
        public void agregarTablaSimbolos (String tipo, String nombreFuncion) {
            String tipoTabla = "Tipo: " + tipo;
            ArrayList<String> funcionMain = new ArrayList<String>();
            currentHash = nombreFuncion;
            funcionMain.add(tipoTabla);
            listaTablasSimbolos.put(currentHash, funcionMain);
        }

        /*
         * muestra el error de sintaxis
         * @param mensaje error
         */
        public void error(String mensaje) {
            System.out.println(mensaje);
        }
        
        public String getTipo(String id) {
            //buscar en la tabla de simbolos actual
            for (String item : listaTablasSimbolos.get(currentHash)) {
                boolean x = item.contains(id);
                if (item.contains(id)) {
                    String title = item.split(":")[0];
                    return title.substring(title.indexOf("(") + 1, title.indexOf(")"));
                }
            }
            return "null";
        }
        
        /**
        * Checks if the arithmetic operation between two operands is type-compatible.
        * Assumes that the types are either "int" or "float".
        * 
        * @param type1 Type of the first operand
        * @param operator Arithmetic operator
        * @param type2 Type of the second operand
        * @return true if the types are compatible, false otherwise
        */
        public boolean checkAritmeticTypeCompatibility(String type1, String operator, String type2) {
            // Ensure both operands are only "int" or "float"
            boolean isInt1 = type1.equals("int") && (type2.equals("int") || type2.equals(""));
            boolean isInt2 = (type1.equals("int") || type1.equals("")) && type2.equals("int");
            boolean isFloat1 = type1.equals("float") && (type2.equals("float") || type2.equals(""));
            boolean isFloat2 = (type1.equals("float") || type1.equals("")) && type2.equals("float");

            boolean isInt = isInt1 || isInt2;
            boolean isFloat = isFloat1 || isFloat2;
            if (!isInt && !isFloat) {
                return false;
            }

            // Check for specific operator rules
            if (contieneOperadorAritmetico(operator) || contieneOperadorBooleano(operator)
                ) {
                // Allow addition, subtraction, multiplication, and division for both "int" and "float"
                return true;
            }

            // Default case
            return false;
        }

        public void generarArchivo() {
            // Solicitar nombre del generarArchivo
            String filename = "compilado.asm";
            Archivos.crearArchivo(filename);
            Archivos.escribirArchivo(filename, "");
            Archivos.agregarArchivo(filename, ".data\n");
            Archivos.agregarArchivo(filename, data.toString());
            Archivos.agregarArchivo(filename, "saltoLinea: .asciiz \"\\n\"");
            Archivos.agregarArchivo(filename, ".text\n");
            // utilizar StringBuffer cod3D
            Archivos.agregarArchivo(filename, cod3D.toString());
            Archivos.agregarArchivo(filename, "j end_program");
            Archivos.agregarArchivo(filename, Archivos.getContenido("macrosMips.asm"));
        }

    public boolean contieneOperadores(String expresion) {
        return contieneOperadorAritmetico(expresion) || contieneOperadorBooleano(expresion);
    }

    public void generarSaltoCondicion() {
        cod3D.append("j false"+(contadorCondiciones-1)+"\n");
        cod3D.append("true"+(contadorCondiciones-1)+":\n");
        cod3D.append("li $t0,1\n");
        cod3D.append("j fin_"+(contadorCondiciones-1)+"\n");
        cod3D.append("false"+(contadorCondiciones-1)+":\n");
        cod3D.append("li $t0,0\n");
        cod3D.append("fin_"+(contadorCondiciones-1)+":\n");
    }

    int antTemp = -1;
    String ultimoOperadorBooleano = "";

    
    public void aritmetica3d(String operandoA, String operador, String operandoB, String tipo) {
        //cod3d mips
        operador = operador.toString().replace(" ", "");
        operandoB = operandoB.replace(":int", "").replace(":float", "").replace(":bool", "").replace(":char", "").replace(":string", "");
        System.out.println("------------------------------------");
        System.out.println("OPERANDOAAAAAAAAAAAAAAAA: " + operandoA);
        System.out.println("OPERADORRRRRRRRRRRRRRRRR: " + operador);
        System.out.println("OPERANDOBBBBBBBBBBBBBBBB: " + operandoB);

        if(tipo.equals("int")) {
            if (operador.equals("+")) {
                if (!contieneOperadores(operandoB) && !operandoB.substring(0,1).equals("(")) {
                    System.out.println("juaquin");
                    if (contieneOperadores(operandoB)) {
                        cod3D.append("add $t" + currentTemp + ", $t" + currentTemp + ", " + operandoB + "\n");
                    }
                }

                //System.out.println("$t: " + currentTemp);
                
                if ((!contieneOperadores(operandoA) && !operandoA.substring(0,1).equals("(")) || operandoA.substring(0,1).equals("-")) {
                    cod3D.append("add $t" + currentTemp + ", $t" + currentTemp + ", " + operandoA + "\n");
                }
                //cod3D.append("add $t"+currentTemp+", $t"+currentTemp+", $t" + (currentTemp+1) + "\n");
            } else if (operador.equals("-")) {
                if (!contieneOperadores(operandoB) && !operandoB.substring(0,1).equals("(")) {
                    cod3D.append("sub $t" + currentTemp + ", $t" + currentTemp + ", " + operandoB + "\n");
                }
                else {//si hay -(expr), entonces, expr (que es lo que se ha operado) cambia su símbolo
                    if (operandoB.substring(0,1).equals("(")) {
                        cod3D.append("mul $t" + (currentTemp+1) + ", $t" + (currentTemp+1) + ", -1\n");
                    }
                    else {
                        cod3D.append("mul $t" + (currentTemp) + ", $t" + (currentTemp) + ", -1\n");
                    }
                }

                if (!contieneOperadores(operandoA) && !operandoA.substring(0,1).equals("(")) {
                    cod3D.append("add $t" + currentTemp + ", $t" + currentTemp + ", " + operandoA + "\n");
                }
            }
            else if (contieneOperadorBooleano(operador)) {
                currentTemp++;
                if (contieneOperadores(operandoB)) {
                    sumaRegsAcumulados();
                }

                if (operador.equals("=>")) {
                    //bge
                    if (currentTemp > 1) {
                        cod3D.append("bge $t" + (currentTemp - 1) + ", $t" + (currentTemp - 2) + ", true" + (contadorCondiciones++) + "\n");
                        generarSaltoCondicion();
                    }
                    if (!contieneOperadores(operandoB)) {
                        cod3D.append("li $t" + currentTemp + ","+operandoB+"\n");
                    }
                    if (!contieneOperadores(operandoA)) {
                        cod3D.append("li $t" + (currentTemp - 1) + ","+operandoA+"\n");
                    }
                    //currentTemp--;
                }
                else if (operador.equals("<")) {
                    //blt
                    if (currentTemp > 1) {
                        cod3D.append("blt $t" + (currentTemp - 1) + ", $t" + (currentTemp - 2) + ", true" + (contadorCondiciones++) + "\n");
                        generarSaltoCondicion();
                    }
                    if (!contieneOperadores(operandoB)) {
                        cod3D.append("li $t" + currentTemp + ","+operandoB+"\n");
                    }
                    if (!contieneOperadores(operandoA)) {
                        cod3D.append("li $t" + (currentTemp - 1) + ","+operandoA+"\n");
                    }
                }
                else if (operador.equals("=<")) {
                    //ble = if (a <= b) goto L
                    if (currentTemp > 1) {
                        cod3D.append("ble $t" + (currentTemp - 1) + ", $t" + (currentTemp - 2) + ", true" + (contadorCondiciones++) + "\n");
                        generarSaltoCondicion();
                    }
                    if (!contieneOperadores(operandoB)) {
                        cod3D.append("li $t" + currentTemp + ","+operandoB+"\n");
                    }
                    if (!contieneOperadores(operandoA)) {
                        cod3D.append("li $t" + (currentTemp - 1) + ","+operandoA+"\n");
                    }
                }
                else if (operador.equals(">")) {
                    //bgt
                    if (currentTemp > 1) {
                        cod3D.append("bgt $t" + (currentTemp - 1) + ", $t" + (currentTemp - 2) + ", true" + (contadorCondiciones++) + "\n");
                        generarSaltoCondicion();
                    }
                    if (!contieneOperadores(operandoB)) {
                        cod3D.append("li $t" + currentTemp + ","+operandoB+"\n");
                    }
                    if (!contieneOperadores(operandoA)) {
                        cod3D.append("li $t" + (currentTemp - 1) + ","+operandoA+"\n");
                    }
                }
                else if (operador.equals("==")) {
                    //beq
                    if (currentTemp > 1) {
                        cod3D.append("beq $t" + (currentTemp - 1) + ", $t" + (currentTemp - 2) + ", true" + (contadorCondiciones++) + "\n");
                        generarSaltoCondicion();
                    }
                    if (!contieneOperadores(operandoB)) {
                        cod3D.append("li $t" + currentTemp + ","+operandoB+"\n");
                    }
                    if (!contieneOperadores(operandoA)) {
                        cod3D.append("li $t" + (currentTemp) + ","+operandoA+"\n");
                    }
                }
                else if (operador.equals("!=")) {
                    //bne
                    if (currentTemp > 1) {
                        cod3D.append("bne $t" + (currentTemp - 1) + ", $t" + (currentTemp - 2) + ", true" + (contadorCondiciones++) + "\n");
                        generarSaltoCondicion();
                    }
                    if (!contieneOperadores(operandoB)) {
                        cod3D.append("li $t" + currentTemp + ","+operandoB+"\n");
                    }
                    if (!contieneOperadores(operandoA)) {
                        cod3D.append("li $t" + (currentTemp - 1) + ","+operandoA+"\n");
                    }
                }
                else if (operador.equals("^")) {
                    //and
                    if (currentTemp > 1) {
                        cod3D.append("and $t" + (currentTemp - 1) + ", $t" + (currentTemp - 2) + ", $t" + (currentTemp - 1) + "\n");
                        generarSaltoCondicion();
                    }
                    if (!contieneOperadores(operandoB)) {
                        cod3D.append("li $t" + currentTemp + ","+operandoB+"\n");
                    }
                    if (!contieneOperadores(operandoA)) {
                        cod3D.append("li $t" + (currentTemp - 1) + ","+operandoA+"\n");
                    }
                }
                else if (operador.equals("#")) {
                    //or
                    if (currentTemp > 1) {
                        cod3D.append("or $t" + (currentTemp - 1) + ", $t" + (currentTemp - 2) + ", $t" + (currentTemp - 1) + "\n");
                        generarSaltoCondicion();
                    }
                    if (!contieneOperadores(operandoB)) {
                        cod3D.append("li $t" + currentTemp + ","+operandoB+"\n");
                    }
                    if (!contieneOperadores(operandoA)) {
                        cod3D.append("li $t" + (currentTemp - 1) + ","+operandoA+"\n");
                    }
                }
                else if (operador.equals("!")) {
                    //not
                    if (currentTemp > 1) {
                        cod3D.append("not $t" + (currentTemp - 1) + ", $t" + (currentTemp - 1) + "\n");
                    }
                    if (!contieneOperadores(operandoA)) {
                        cod3D.append("li $t" + currentTemp + ","+operandoA+"\n");
                    }
                }
            }
        }
    }

    public void generarBloqueSalto(String tipo, int contador, boolean alt) {
        cod3D.append("beq $0, 1," + tipo + "_" + contador + "\n");
        cod3D.append("j fin_"+tipo + contador + "\n");
        cod3D.append(tipo + "_" + contador + ":\n");
    }
:}

parser code {:
    IdLexer miParser;
    // Habilitar la depuración
    boolean _cup_debug = true;
    List<String> syntaxErrors = new ArrayList<>();

    String tipoRetornoActual = null;

    /**
        * Establece el tipo de retorno actual
        * @param tipo tipo de retorno actual
        */
    public void setTipoRetorno(String tipo) {
            tipoRetornoActual = tipo;
    }

    /**
        * Verifica que el tipo de retorno sea el correcto
        * @param tipoReal tipo de retorno real
        */
    public void checkTipoRetorno(String tipoReal) {
            if (tipoRetornoActual != null && !tipoRetornoActual.equals(tipoReal)) {
                    System.err.println("Tipo de retorno incorrecto. Se esperaba: " + tipoRetornoActual + ", pero se encontró: " + tipoReal);
            }
    }

    // Agregar un método para obtener la lista de errores después del análisis
    /**
        * Obtiene la lista de errores de sintaxis
        * @return lista de errores de sintaxis
        */
    public List<String> getSyntaxErrors() {
            return syntaxErrors;
    }

    @SuppressWarnings("deprecation")
    public Parser(IdLexer miParser) {
            this.miParser = miParser;
            this.symbolFactory = new DefaultSymbolFactory();
    }

    /**
        * captura los errores de sintaxis 
        * @param s error
        */
    public void syntax_error(Symbol s) {
        try {
            String errorMessage = "Error de sintaxis: " + s.sym + " (" + s.value + ") en la línea " + (s.left+1) + " columna " + (s.right+1);
            System.err.println(errorMessage);
            // Agregar lógica adicional si es necesario para errores recuperables
            // throw new Exception("Error recuperable");
        } catch (Exception e) {
            System.err.println("Hola");
            System.err.println("Error de sintaxis: " + e.getMessage());
        }
    }


    /**
        * captura los errores de sintaxis no recuperables
        * @param s error
        */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
            String errorMessage = "Error de sintaxis no recuperable: " + s.value + " en la línea " + (s.left + 1) + " columna " + (s.right + 1);
            System.err.println(errorMessage);

            // Agregar lógica adicional si es necesario para errores no recuperables
            // throw new Exception("Error no recuperable");
    }

    

:}


init with {: :};

scan with {: return miParser.next_token(); :};

/* Terminales */

// Operadores aritméticos binarios
terminal String RUDOLPH; // +
terminal String DASHER; // -
terminal String  DANCER; // /
terminal String  PRANCER; // // (division entera)
terminal String  VIXEN; // *
terminal String  COMET; // ~
terminal String CUPID; // **
// Operadores aritméticos unarios
terminal String  GRINCH; // ++
terminal String  QUIEN; // --
// Operadores relacionales
terminal String  HERMEY; // <
terminal String  BUDDY; // =<
terminal String  JINGLE; // >
terminal String JANGLE; // >=
terminal String  PEPPERMINT; // ==
terminal String  WUNORSE; // !=
// Operadores lógicos
terminal String  MELCHOR; // ^
terminal String  GASPAR; // #
terminal String BALTASAR; // !
terminal  LOCAL; // variable

// Tipos
terminal String PERSONA; // identificador
terminal String SANTACLAUS; // int
terminal String PERENOEL; // float
terminal String FATHERCHRISTMAS; // boolean
terminal String KRISKRINGLE; // char
terminal String DEDMOROZ; // string
terminal Integer[] PAPANOEL; // array
terminal Integer L_SANTACLAUS; // literal int
terminal Double L_PERENOEL; // literal float
//terminal Boolean L_FATHERCHRISTMAS; // literal boolean
terminal String L_FATHERCHRISTMAS; // literal boolean
terminal String L_KRISKRINGLE; // literal char
terminal String L_DEDMOROZ; // literal string
//terminal Integer[] L_PAPANOEL; // literal array

// Parentesis
terminal String ABRECUENTO; // (
terminal String CIERRECUENTO; // )
terminal String ABREEMPAQUE; // [
terminal String CIERREEMPAQUE; // ]
terminal String ABREREGALO; // {
terminal String CIERRAREGALO; // }

// Estructuras de control
terminal String ELFO;//if
terminal String HADA;//else
terminal String DUENDE;//else
terminal String ENVUELVE;//for
terminal String HACE;//do
terminal String REVISA;//until
terminal String ENVIA;//return
terminal String CORTA;//break

// Entrada y salida
terminal Integer NARRA;//print
terminal Integer ESCUCHA;//read 

// Fin de expresión
terminal  FINREGALO; // |

// Lexema separador
terminal String COMA; //,

// Asignación
terminal Integer ENTREGA;//<=

// Comentarios
// son ignorados por el compilador

// Funciones
terminal Integer MAIN; //main
terminal Integer REGALO; // definicion de funcion 

//-------------------------------------------------------------------------------------- NO Terminales
non terminal navidad; // Símbolo inicial ✅
non terminal bolsanavidena; // produccion para funciones ✅
non terminal regaloprincipal; // produccion para main ✅
non terminal regalofuncional; // produccion para funciones ✅
non terminal tipoRegalo; // produccion para tipo de funcion ✅
non terminal monnos; // produccion para parametros ✅
non terminal juguetes; // produccion para cuerpo de funcion ✅
non terminal juguete; // produccion para cuerpo de funcion ✅
non terminal tallerDeJuguetes; // produccion para cuerpo de funcion ✅
non terminal piezaJuguete; // produccion para cuerpo de funcion ✅
non terminal gomaLocaAritmetica; // produccion para cuerpo de funcion ✅
non terminal gomaLocaRelacional; // produccion para cuerpo de funcion ✅
non terminal gomaLocaLogica; // produccion para cuerpo de funcion ✅
non terminal asignarJuguete;
non terminal tipoJuguete;
non terminal subtipoRegalo;
non terminal gomasNavidenas;
non terminal piezaImportada;
non terminal estampillasNavidena;
non terminal estructurarJuguete;
non terminal estructurarJuguete_if;
non terminal estructurarJuguete_elif;
non terminal estructurarJuguete_else;
non terminal condiciones;
non terminal bloque;

non terminal estructurarJuguete_for;
non terminal encabezado_for;
non terminal estructurarJuguete_doUntil;
non terminal bolsaFuncional;
non terminal monnosAux;
non terminal  parens;
//-------------------------------------------------------------------------------------- PRECEDENCIA
precedence left ABRECUENTO, CIERRECUENTO, PERSONA;





//-------------------------------------------------------------------------------------- PRODUCCIONES
/* Símbolo inicial y producciones gramaticales*/
start with navidad;

/* Producciones gramaticales */
navidad ::= 
        bolsanavidena
        {:
            imprimirTablaSimbolos();
            System.out.println("Fin de ejecución");
            
            if (compila) {
                generarArchivo();
                System.out.println("Compilación exitosa");
            } else {
                System.out.println("Compilación fallida");
            }
        :}
        ;

bolsanavidena ::=  regaloprincipal
                | bolsaFuncional regaloprincipal;

bolsaFuncional ::= regalofuncional | bolsaFuncional regalofuncional;

regaloprincipal ::= REGALO SANTACLAUS MAIN ABRECUENTO  CIERRECUENTO ABREREGALO
                        {:
                            agregarTablaSimbolos("int", "main");
                            cod3D.append("main:\n");
                        :}
                        juguetes
                    CIERRAREGALO;

regalofuncional ::= REGALO tipoRegalo:tipo PERSONA:nombre
                        {:
                            verificarDeclaracionFuncion(nombre);
                            agregarTablaSimbolos(tipo.toString(), nombre.toString());
                            cod3D.append(nombre + ":\n");
                        :} 
                    monnosAux ABREREGALO
                        juguetes
                    CIERRAREGALO
                    ;
                    
monnosAux ::= ABRECUENTO monnos CIERRECUENTO | ABRECUENTO CIERRECUENTO;

tipoRegalo ::=  PERENOEL:tipo {: RESULT =  tipo; :}
            | FATHERCHRISTMAS:tipo {: RESULT =  tipo; :}
            | subtipoRegalo:tipo {: RESULT =  tipo; :}
            | DEDMOROZ:tipo {: RESULT =  tipo; :}
            | PAPANOEL:tipo {: RESULT =  tipo; :}
            ;

subtipoRegalo ::= SANTACLAUS:tipo {: RESULT =  tipo; :}
                | KRISKRINGLE:tipo {: RESULT =  tipo; :}
                ;

monnos ::= tipoRegalo:tipo PERSONA:nombre
                {:
                    verificarDeclaracionParametro(nombre);
                    listaTablasSimbolos.get(currentHash).add( "Parametro (" + tipo.toString() + ") : " + nombre);
                :} 
            | tipoRegalo:tipo PERSONA:nombre COMA monnos
                {:
                    verificarDeclaracionParametro(nombre);
                    listaTablasSimbolos.get(currentHash).add( "Parametro (" + tipo.toString() + ") : " + nombre);
                :};

juguetes ::= juguete
            | juguete juguetes;

juguete ::= asignarJuguete FINREGALO
            | piezaImportada FINREGALO
            | estructurarJuguete
            | CORTA FINREGALO
            | ENVIA tallerDeJuguetes:tp FINREGALO
                {:
                    String tipo = tp.toString().split(":")[tp.toString().split(":").length - 1];
                    verificarTipoRetorno(tipo);
                :}
            | NARRA parens tallerDeJuguetes:tp parens FINREGALO
            {:
                //solo se permite imprimir int, string, y float
                String tipo = tp.toString().split(":")[tp.toString().split(":").length - 1];
                String nombre = vValue+currentHash;
                


                boolean isVar = variableDeclarada(vValue);
                
                if (!isVar) {
                    //data.append("print" + contadorPrints + ": .asciiz " + vValue + "\"\n");");
                    if (tipo.equals("int")) {
                        data.append("print" + contadorPrints + ": .word " + vValue + "\n");
                    }
                    else if (tipo.equals("float")) {
                        if (contieneOperadorAritmetico(vValue)) {
                            System.err.println("Únicamente se permite imprimir operaciones decimales almacenadas en una variable.");
                        }
                        else {
                            data.append("print" + contadorPrints + ": .float " + vValue + "\n");
                        }
                    }
                    else if (tipo.equals("string")) {
                        data.append("print" + contadorPrints + ": .asciiz " + vValue + "\n");
                    }
                    else {
                        System.err.println("No se permite imprimir el tipo de dato: " + tipo);
                        contadorPrints--;
                    }
                    nombre = "print" + contadorPrints;
                }

                if (tipo.equals("int") || tipo.equals("bool")) {
                    cod3D.append("lw $a0, " + nombre + "\njal printInt\n");
                    cod3D.append("la $a0, saltoLinea\njal printStr\n");
                }
                else if (tipo.equals("float")) {
                    if (!contieneOperadorAritmetico(vValue)) {
                        cod3D.append("l.s $f12, " + nombre + "\njal printFloat\n");
                        cod3D.append("la $a0, saltoLinea\njal printStr\n");
                    }
                }
                else if (tipo.equals("string")) {
                    cod3D.append("la $a0, " + nombre + "\njal printStr\n");
                    cod3D.append("la $a0, saltoLinea\njal printStr\n");
                }
                else {
                    System.err.println("No se permite imprimir el tipo de dato: " + tipo);
                    contadorPrints--;
                }
                contadorPrints++;
            :}
            | ESCUCHA tallerDeJuguetes:tp FINREGALO
            {:
                // System.out.println("paso por el read: "+tp.toString());
                String tipo = tp.toString().split(":")[tp.toString().split(":").length - 1];
                String variable = tp.toString().split(":")[0].replace(" ", "").replace("(", "");
                System.out.println("tipo: "+tipo);
                boolean isVar = variableDeclarada(variable);
                //Se valida que la variable exista en la tabla de simbolos
                if (!isVar) {
                    System.err.println("Error semántico: Variable '" + variable + "' no declarada.");
                    compila = false;
                }
                //validacion que la variable sea de tipo int o float
                if (!tipo.equals("int") && !tipo.equals("float")) {
                    System.err.println("Error semántico: Variable '" + variable + "' no es de tipo int o float.");
                    compila = false;
                }
                // generacion de codigo 3d para el read
                //si es int se usa la funcion readInt 
                if (tipo.equals("int")) {
                    //se llama a la funcion readInt
                    cod3D.append("jal readInt\n");
                    //se guarda el valor en la variable
                    cod3D.append("sw $v0, " + variable + currentHash + "\n");
                }
                //si es float se usa la funcion readFloat
                else if (tipo.equals("float")) {
                    //se llama a la funcion readFloat
                    cod3D.append("jal readFloat\n");
                    //se guarda el valor en la variable
                    cod3D.append("s.s $f0, " + variable + currentHash + "\n");
                }

            :}
            ;

asignarJuguete ::= LOCAL tipoJuguete:tipo PERSONA:nombre ENTREGA tallerDeJuguetes:tp
                    {:  
                        if(variableDeclarada(nombre)){
                            System.err.println("Error semántico: Variable '" + nombre + "' ya declarada.");
                            compila = false;
                        }
                        String tipoAux = tp.toString().split(":")[tp.toString().split(":").length - 1];
                        
                        if (!tipoAux.equals(tipo.toString())  && !contieneOperadorBooleano(tp.toString())) {
                            System.err.println("Error semántico: Tipo de dato incorrecto en la asignación de la variable '" + nombre + "'.");
                            compila = false;
                        }

                        sumaRegsAcumulados();
                        
                        
                        //crear una funcion que realice lo de abajo
                        // if (!contieneOperadorAritmetico(tp.toString())) { // si es una operacion aritmetica
                        cod3D.append("#" + vValue + "\n");
                        if(compila){
                            if (tipo.toString().equals("int")) {
                                data.append(nombre + currentHash + ": .word 0\n");
                                cod3D.append("sw $t"+currentTemp+", " + nombre + currentHash + "\n");
                                //cod3D.append("lw $a0, "+nombre+currentHash+"\nli $v0, 1\nsyscall\n");

                            } else if (tipo.toString().equals("float")) {
                                data.append(nombre + currentHash + ": .float 0.0\n");
                                //guardo el valor en la variable creada
                                cod3D.append("s.s $f0, " + nombre + currentHash + "\n");
                                //imprimo el valor de la variable
                                cod3D.append("l.s $f12, " + nombre + currentHash + "\nli $v0, 2\nsyscall\n");
                                cantidadNumeros=0;
                            } else if (tipo.toString().equals("bool")) {
                                data.append(nombre + currentHash + ": .word 0\n");
                                contadorCondiciones++;
                                generarSaltoCondicion();
                                cod3D.append("sw $t0, " + nombre + currentHash + "\n");
                            } else if (tipo.toString().equals("char")) {
                                data.append(nombre + currentHash + ": .byte 0\n");
                                cod3D.append("sb $t0, " + nombre + currentHash + "\n");
                                cod3D.append("li $v0, 11\nli $a0, 0\nsyscall\n");

                            } else if (tipo.toString().equals("string")) {
                                data.append(nombre + currentHash + ": .word 0\n");
                                cod3D.append("sw $t0, " + nombre + currentHash + "\n");
                                cod3D.append("lw $a0, "+nombre+currentHash+"\nli $v0, 1\nsyscall\n");
                            } else if (tipo.toString().contains("[") && tipo.toString().contains("]")) {
                                System.out.println("paso por el array 1");
                                System.out.println("tipo: "+tipo);
                                String tamano = tipo.toString().replace("[", "").replace("]", "");
                                String tamanoAux = tamano.toString().replace(":int", "").replace(":float", "").replace(":bool", "").replace(":char", "").replace(":string", "");
                                String tipoAux2 = tipo.toString().replace("int", "").replace("float", "").replace("bool", "").replace("char", "").replace("string", "").replace("[", "").replace("]", "").replace(":", "");
                                System.out.println("tamano: "+tipoAux2);
                                int tamanoInt = Integer.parseInt(tipoAux2);
                                System.out.println("largo: "+tamanoInt);
                                // apartar espacio en memoria para el array segun el tipo de dato
                                data.append(nombre + currentHash + ": .space "+(tamanoInt*4)+"\n");
                                //guardo el valor en la variable creada
                                

                            }                            
                        }
                        else {
                            cod3D.append("add $t0, " + tp.toString().split(":")[0] + "\n");
                            cod3D.append("sw $t0, " + nombre + currentHash + "\n");
                            cod3D.append("lw $a0, "+nombre+currentHash+"\nli $v0, 1\nsyscall\n");
                        }
                        
                        cod3D.append("li $t0, 0\n");  

                        primeraOp = true;
                        listaTablasSimbolos.get(currentHash).add( "Variable (" + tipo.toString() + ") : " + nombre + " = " + vValue);
                    :}
                    | LOCAL tipoJuguete:tipo PERSONA:nombre
                    {:
                        if(variableDeclarada(nombre)){
                            System.err.println("Error semántico: Variable '" + nombre + "' ya declarada.");
                            compila = false;
                        }
                        if (tipo.equals("int")){
                            data.append(nombre + currentHash + ": .word 0\n");  
                        } else if (tipo.equals("float")) {
                            data.append(nombre + currentHash + ": .float 0.0\n");
                        } else if (tipo.equals("bool")) {
                            data.append(nombre + currentHash + ": .word 0\n");
                        } else if (tipo.equals("char")) {
                            data.append(nombre + currentHash + ": .byte 0\n");
                        } else if (tipo.equals("string")) {
                            data.append(nombre + currentHash + ": .word 0\n");
                        } else if (tipo.toString().contains("[") && tipo.toString().contains("]")) {
                            String tamano = tipo.toString().replace("[", "").replace("]", "");
                            String tamanoAux = tamano.toString().replace(":int", "").replace(":float", "").replace(":bool", "").replace(":char", "").replace(":string", "");
                            String tipoAux2 = tipo.toString().replace("int", "").replace("float", "").replace("bool", "").replace("char", "").replace("string", "").replace("[", "").replace("]", "").replace(":", "");
                            System.out.println("tamano: "+tipoAux2);
                            int tamanoInt = Integer.parseInt(tipoAux2);
                            // apartar espacio en memoria para el array segun el tipo de dato
                            data.append(nombre + currentHash + ": .space "+(tamanoInt*4)+"\n");

                        }
                        // data.append(nombre + currentHash + ": .word 0\n");
                        listaTablasSimbolos.get(currentHash).add( "Variable (" + tipo.toString() + ") : " + nombre);
                    :}
                    | PERSONA:nombre ENTREGA tallerDeJuguetes:tp
                    {:
                        verificarDeclaracionVariable(nombre);
                        String tipoAux = tp.toString().split(":")[tp.toString().split(":").length - 1];  
                        if (!tipoAux.equals(getTipo(nombre))) {
                            System.err.println("Error semántico: Tipo de dato incorrecto en la asignación de la variable '" + nombre + "'.");
                            compila = false;
                        }

                        data.append(nombre + currentHash + ": .word 0\n");
                        listaTablasSimbolos.get(currentHash).add( "Variable anterior ( no identificado ) : " + nombre + " = " + vValue);
                    :}

                    | LOCAL tipoJuguete:tipo PERSONA:nombre ENTREGA ABREEMPAQUE estampillasNavidena CIERREEMPAQUE
                    {:
                        System.out.println("paso por el array");
                        if(variableDeclarada(nombre)){
                            System.err.println("Error semántico: Variable '" + nombre + "' ya declarada.");
                            compila = false;
                        }
                        //se saca el tamaño del array de la variable a crear, se multiplica por 4 para saber cuantos bytes se necesitan
                        
                        // int tamanoInt = Integer.parseInt(tamano);
                        // System.out.println("tamano: "+tamano);
                        listaTablasSimbolos.get(currentHash).add( "Variable ("+tipo.toString()+ ") : " + nombre + " = [" + vValue + "]");
                        System.out.println("tipo: "+tipo.toString());
                        String tamano = tipo.toString().replace("[", "").replace("]", "");
                        System.out.println("tamano: "+tamano);
                        String tipoAceptado = tipo.toString().split(":")[0];
                        System.out.println("tipoAceptado: "+tipoAceptado);
                        String tamanoAux = tamano.toString().replace(":int", "").replace(":float", "").replace(":bool", "").replace(":char", "").replace(":string", "");
                        String tipoAux2 = tipo.toString().replace("int", "").replace("float", "").replace("bool", "").replace("char", "").replace("string", "").replace("[", "").replace("]", "").replace(":", "");
                        System.out.println("tamano: "+tipoAux2);
                        int tamanoInt = Integer.parseInt(tipoAux2);
                        // apartar espacio en memoria para el array segun el tipo de dato
                        data.append(nombre + currentHash + ": .space "+(tamanoInt*4)+"\n");
                        System.out.println(vValue);
                        //validar que el tipo de dato del array sea el mismo que el tipo de dato de los valores
                        String[] tiposValoresArray = vValue.toString().split(",");
                        for(int i = 0; i < tiposValoresArray.length; i++){
                            String tipoValor = tiposValoresArray[i].split(":")[1];
                            if(!tipoAceptado.contains(tipoValor)){
                                System.err.println("Error semántico: El tipo de dato del array "+nombre+" es diferente al tipo de dato de los valores que se le quieren asignar.");
                                compila = false;
                            }
                        }
                        // quitar el tipo de dato del array para poder guardar los valores
                        String valores = vValue.toString().replace(":int", "").replace(":float", "").replace(":bool", "").replace(":char", "").replace(":string", "").replace(" ", "");
                        System.out.println("valores: "+valores);
                        // separar los valores del array
                        String[] valoresArray = valores.split(",");
                        if(valoresArray.length > tamanoInt){
                            System.err.println("Error semántico: El tamaño del array es menor a la cantidad de valores que se le quieren asignar.");
                            compila = false;
                        }
                        if(compila){
                            if(!tipoAceptado.contains("float")){
                                // paso la direccion de memoria de la variable a t0
                                cod3D.append("la $t0, "+nombre+currentHash+"\n");
                                // guardar los valores en el array
                                for(int i = 0; i < valoresArray.length; i++){
                                    // guardar el valor en la posicion del array
                                    cod3D.append("li $t"+(i+1)+", "+valoresArray[i]+"\n");
                                    cod3D.append("sw $t"+(i+1)+", "+(i*4)+"($t0)\n");
                                }
                            } // si es float se usa s.s
                            else{
                                // paso la direccion de memoria de la variable a t0
                                cod3D.append("la $t0, "+nombre+currentHash+"\n");
                                // guardar los valores en el array
                                for(int i = 0; i < valoresArray.length; i++){
                                    // guardar el valor en la posicion del array
                                    cod3D.append("li.s $f"+(i+1)+", "+valoresArray[i]+"\n");
                                    cod3D.append("s.s $f"+(i+1)+", "+(i*4)+"($t0)\n");
                                }
                            }
                        }
                        
                    :}
                    | PERSONA:nombre ABREEMPAQUE tallerDeJuguetes:tp CIERREEMPAQUE ENTREGA tallerDeJuguetes
                    {:
                        verificarDeclaracionVariable(nombre);
                        String tipoAux = tp.toString().split(":")[tp.toString().split(":").length - 1];
                        if (!tipoAux.equals(getTipo(nombre))) {
                            System.err.println("Error semántico: Tipo de dato incorrecto en la asignación de la variable '" + nombre + "'.");
                            compila = false;
                        }
                        String tipo = getTipo(nombre);
                        listaTablasSimbolos.get(currentHash).add( "Variable ("+tipo+") : " + nombre + " = [" + vValue + "]");
                    :}
                    | PERSONA:nombre ENTREGA ABREEMPAQUE estampillasNavidena CIERREEMPAQUE
                    {:
                        verificarDeclaracionVariable(nombre);
                        String tipo = getTipo(nombre);
                        listaTablasSimbolos.get(currentHash).add( "Variable ("+tipo+") : " + nombre + " = [" + vValue + "]");

                    :}
                    ;

tipoJuguete ::= tipoRegalo:tipo {: RESULT =  tipo; :}
            |  tipoRegalo:tipo ABREEMPAQUE tallerDeJuguetes:val CIERREEMPAQUE
            {: RESULT =  tipo.toString() + "[" + val.toString() + "]"; :}
            ;


//para crear los literales
tallerDeJuguetes ::= piezaJuguete: val
                    {:
                        RESULT =  val.toString();
                        vValue = RESULT.toString().split(":")[0];
                        String tipo = val.toString().split(":")[1].split(" ")[0];
                    :}
                    | piezaJuguete:valA gomasNavidenas:operador tallerDeJuguetes:valB //operando operador operando
                    {:
                        String tpValA = "";
                        String tpValB = "";
                        String tipo = "";

                        try {
                            tpValA = valA.toString().split(":")[1].split(" ")[0];
                            tipo = tpValA;
                        } catch (Exception e) {}

                        try {
                            tpValB = valB.toString().split(":")[1].split(" ")[0];
                            tipo = tpValB;
                        } catch (Exception e) {}

                        if (!checkAritmeticTypeCompatibility(tpValA, operador.toString(), tpValB)) {
                            System.err.println("Error de tipos en la expresión: " + valA.toString() + " " + operador.toString() + " " + valB.toString());
                        }

                        valA = valA.toString().replace(":int", "").replace(":float", "").replace(":bool", "").replace(":char", "").replace(":string", "");


                        RESULT =  valA.toString() + " " + operador.toString() + " " + valB.toString();
                        vValue = RESULT.toString().replace(":int", "").replace(":float", "").replace(":bool", "").replace(":char", "").replace(":string", "");
                        
                        //valB = valB.toString().replace(":int", "").replace(":float", "").replace(":bool", "").replace(":char", "").replace(":string", "");

                        //currentTemp -= 1;
                        aritmetica3d(valA.toString(), operador.toString(), valB.toString(), tipo.toString());
                    :}
                    | GRINCH:operador piezaJuguete:val
                    {:
                        RESULT = operador.toString() + " " + val.toString();
                        vValue = RESULT.toString();
                    :}
                    | QUIEN:operador piezaJuguete:val
                    {:
                        RESULT = operador.toString() + " " + val.toString();
                        vValue = RESULT.toString();
                    :}
                    | BALTASAR:operador tallerDeJuguetes:val
                    {:
                        RESULT = operador.toString() + " " + val.toString();
                        vValue = RESULT.toString();
                    :}
                    | parens tallerDeJuguetes:val parens // ( expr )
                    {:
                        //String tipo = val.toString().split(":")[1];
                        String tipo = val.toString().split(":")[val.toString().split(":").length - 1];
                        String valLit = val.toString().replace(":int", "").replace(":float", "").replace(":bool", "").replace(":char", "").replace(":string", "");
                        try {
                            RESULT =  "( " + val.toString() + " ):" + tipo;
                        }
                        catch (Exception e) {
                            RESULT =  "( " + val.toString() + " )";
                        }
                        vValue = "( " + valLit + " )";
                        cod3D.append("#finParentesis\n");
                    :}
                    | 
                    parens tallerDeJuguetes:valA parens
                    gomasNavidenas:operador
                    tallerDeJuguetes:valB // ( expr ) gomasNavidenas tallerDeJuguetes
                    {:
                        String tpValA = "";
                        String tpValB = "";
                        String tipo = "";

                        try {
                            tpValA = valA.toString().split(":")[1].split(" ")[0];
                        } catch (Exception e) {}
                        try {
                            tpValB = valB.toString().split(":")[1].split(" ")[0];
                        } catch (Exception e) {}
                        
                        tipo = tpValA.equals("") ? tpValB : tpValA;

                        if (!checkAritmeticTypeCompatibility(tpValA, operador.toString(), tpValB)) {
                            System.out.println("tipoA: " + tpValA + "|  tipoB: " + tpValB);
                            System.err.println("Error de tipos en la expresión: (" + valA.toString() + "):" + tipo + operador.toString() + " " + valB.toString());
                        }
                        
                        valA = valA.toString().replace(":int", "");
                        valA = valA.toString().replace(":float", "");

                        RESULT =  "( " + valA.toString() + " ):" + tipo  + " " + operador.toString() + " " + valB.toString();
                        vValue = "( " + valA.toString() + " ) " + operador.toString() + " " + valB.toString();
                        
                        valB = valB.toString().replace(":int", "").replace(":float", "").replace(":bool", "").replace(":char", "").replace(":string", "");
                        aritmetica3d("( " + valA.toString() + " ) ", operador.toString(), valB.toString(), tipo.toString());
                    :}
                    ;

parens ::= ABRECUENTO {: currentTemp += 1; if (maxTemp < currentTemp) {maxTemp = currentTemp;} :}
            |   CIERRECUENTO  {:
                if (currentTemp > 0) {
                    currentTemp -= 1;
                }
            :}
            ;

gomasNavidenas ::= gomaLocaAritmetica:operador {: RESULT = operador; :}
                | gomaLocaRelacional:operador {: RESULT = operador; :}
                | gomaLocaLogica:operador {: RESULT = operador; :}
                ;

piezaJuguete ::= L_SANTACLAUS:val
                {:
                    vValue = val.toString();
                    RESULT =  val.toString() + ":int";
                :}
            | L_PERENOEL:val
                {:
                    vValue = val.toString();
                    RESULT =  val + ":float";
                :}
            | L_FATHERCHRISTMAS:val
                {:
                    vValue = val.toString();
                    RESULT =  val + ":bool";
                :}
            | L_KRISKRINGLE:val
                {:
                    vValue = val.toString();
                    RESULT =  val + ":char";
                :}
            | L_DEDMOROZ:val
                {:
                    vValue = val.toString();
                    RESULT =  val + ":string";
                :}
            | PERSONA:nombre ABREEMPAQUE tallerDeJuguetes:val CIERREEMPAQUE //indice de array
                {:
                    RESULT = nombre + "[" + val.toString() + "]";//TODO: agregar a la tabla de simbolos
                :}
            | PERSONA:nombre
                {:
                    vValue = nombre.toString();
                    RESULT =  nombre + ":" + getTipo(nombre.toString());
                :}
            | piezaImportada:val
                {:
                    RESULT =  val;
                    vValue = RESULT.toString();
                    String nombreFuncion = val.toString().split(":")[0];
                    System.out.println(nombreFuncion);
                    System.out.println("hola");
                    if (!funcionDeclarada(nombreFuncion)) {
                        System.err.println("Error semántico: Función '" + nombreFuncion + "' no declarada.");
                        compila = false;
                    }
                :}
            ;

piezaImportada ::= PERSONA:nombre parens parens
                    {:
                        System.out.println(nombre);
                        if (!funcionDeclarada(nombre)) {
                            System.err.println("Error semántico: Función '" + nombre + "' no declarada.");
                            compila = false;
                        }
                        RESULT =  nombre + "()";
                        vValue = RESULT.toString();

                         // generacion de codigo 3d para llamada a funcion
                        //se llama a la funcion
                        cod3D.append("jal " + nombre + "\n");
                        //se guarda el valor de retorno en la variable        

                    :}
                | PERSONA:nombre parens estampillasNavidena:val parens
                    {:

                        if (!funcionDeclarada(nombre)) {
                            System.err.println("Error semántico: Función '" + nombre + "' no declarada.");
                            compila = false;
                        }
                        // String tipo = tipoRetornoFuncion(nombre);
                        RESULT =  nombre + "( " + val.toString() + " )";
                        vValue = RESULT.toString();

                        // generacion de codigo 3d para llamada a funcion
                        //elimina el tipo de dato de los parametros y se queda con los valores
                        String parametros = val.toString().replace(":int", "").replace(":float", "").replace(":bool", "").replace(":char", "").replace(":string", "").replace(" ", "");
                        System.out.println("parametros: "+parametros);
                        String[] parametrosArray = parametros.split(",");

                        // String[] parametrosArray = parametros.split(",");
                        
                        for (int i = 0; i < parametrosArray.length; i++) {
                            System.out.println("parametro: "+parametrosArray[i]);
                        }
                        // se pasa los parametros a la funcion 
                        for (int i = 0; i < parametrosArray.length; i++) {
                            String tipo = getTipo(parametrosArray[i]);
                            if (tipo.equals("int")) {
                                cod3D.append("li $a" + i + ", " + parametrosArray[i] + "\n");
                            }
                            else if (tipo.equals("float")) {
                                cod3D.append("li.s $f" + i + ", " + parametrosArray[i] + "\n");
                            }
                            else if (tipo.equals("bool")) {
                                cod3D.append("li $a" + i + ", " + parametrosArray[i] + "\n");
                            }
                            else if (tipo.equals("char")) {
                                cod3D.append("li $a" + i + ", " + parametrosArray[i] + "\n");
                            }
                            else if (tipo.equals("string")) {
                                cod3D.append("li $a" + i + ", " + parametrosArray[i] + "\n");
                            }
                        }
                        //se llama a la funcion
                        cod3D.append("jal " + nombre + "\n");


                    :}
                ;

estampillasNavidena ::= tallerDeJuguetes:val
                        {:
                            RESULT =  val;
                            vValue = RESULT.toString();
                        :}
                    | tallerDeJuguetes:valA COMA estampillasNavidena:valB
                        {:
                            RESULT =  valA.toString() + ", " + valB.toString();
                            vValue = RESULT.toString();
                        :}
                    ;

gomaLocaAritmetica ::= RUDOLPH:operador {: RESULT = operador; :}
                    | DASHER:operador {: RESULT = operador; :}
                    | DANCER:operador {: RESULT = operador; :}
                    | PRANCER:operador {: RESULT = operador; :}
                    | VIXEN:operador {: RESULT = operador; :}
                    | COMET:operador {: RESULT = operador; :}
                    | CUPID:operador {: RESULT = operador; :}
                    ;

gomaLocaRelacional ::= HERMEY:operador {: RESULT = operador; :}
                    | BUDDY:operador {: RESULT = operador; :}
                    | JINGLE:operador {: RESULT = operador; :}
                    | JANGLE:operador {: RESULT = operador; :}
                    | PEPPERMINT:operador {: RESULT = operador; :}
                    | WUNORSE:operador {: RESULT = operador; :}
                    ;

gomaLocaLogica ::= MELCHOR:operador {: RESULT = operador; :}
                | GASPAR:operador {: RESULT = operador; :}
                ;

estructurarJuguete ::= ELFO estructurarJuguete_if
                        {:
                            cod3D.append("beq $0, 1, if_" + contadorIf + "\n");//condicion
                            cod3D.append("j fin_if" + contadorIf + "\n");//salto a fin
                            cod3D.append("if_" + contadorIf + ":\n");//creacion etiqueta
                        :}
                        bloque
                        {:
                            cod3D.append("fin_if" + contadorIf + ":\n");//finalizacion etiqueta
                            contadorIf++;//aumento contador
                        :}
                    | estructurarJuguete_if ELFO
                        {:
                                cod3D.append("beq $0, 1, if_" + contadorIf + "\n");//condicion if
                                cod3D.append("j else_" + contadorElse + "\n");//salto a else
                                cod3D.append("if_" + contadorIf + ":\n");//creacion etiqueta if
                        :}
                        bloque
                        {:
                            cod3D.append("j fin_else" + contadorElse + "\n");
                            contadorIf++;//aumento contador
                        :}
                        DUENDE 
                        {:
                            cod3D.append("else_" + contadorElse + ":\n");//creacion etiqueta else
                        :}
                        bloque
                        {:
                            cod3D.append("fin_else" + contadorElse + ":\n");//finalizacion etiqueta else
                        :}
                    | estructurarJuguete_if  bloque estructurarJuguete_elif bloque
                    | estructurarJuguete_if bloque estructurarJuguete_elif bloque DUENDE bloque
                    | estructurarJuguete_for
                    | estructurarJuguete_doUntil
                    ;

estructurarJuguete_if ::= ELFO condiciones;
estructurarJuguete_elif ::= HADA condiciones
                        | HADA condiciones estructurarJuguete_elif;

//estructurarJuguete_else ::= DUENDE;

estructurarJuguete_for ::= ENVUELVE encabezado_for bloque;
estructurarJuguete_doUntil ::= HACE bloque REVISA condiciones FINREGALO;

condiciones ::= ABRECUENTO tallerDeJuguetes CIERRECUENTO;
bloque ::= ABREREGALO juguetes CIERRAREGALO;


encabezado_for ::= ABRECUENTO asignarJuguete FINREGALO tallerDeJuguetes FINREGALO tallerDeJuguetes CIERRECUENTO;

